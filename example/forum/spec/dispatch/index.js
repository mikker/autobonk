// This file is autogenerated by the hyperdispatch compiler
/* eslint-disable camelcase */

import { c, b4a, assert } from 'hyperdispatch/runtime'
import { version, getEncoding, setVersion } from './messages.js'

const defaultVersion = version

class Router {
  constructor () {
    this._handler0 = null
    this._handler1 = null
    this._handler2 = null
    this._handler3 = null
    this._handler4 = null
    this._handler5 = null
    this._handler6 = null
    this._handler7 = null
    this._handler8 = null
    this._handler9 = null
    this._handler10 = null
    this._handler11 = null
    this._handler12 = null
    this._handler13 = null

    this._missing = 14
  }

  add (name, handler) {
    switch (name) {
      case '@autobonk/remove-writer':
        this._handler0 = handler
        break
      case '@autobonk/add-writer':
        this._handler1 = handler
        break
      case '@autobonk/add-invite':
        this._handler2 = handler
        break
      case '@autobonk/revoke-invite':
        this._handler3 = handler
        break
      case '@autobonk/init-context':
        this._handler4 = handler
        break
      case '@autobonk/define-role':
        this._handler5 = handler
        break
      case '@autobonk/grant-roles':
        this._handler6 = handler
        break
      case '@autobonk/revoke-roles':
        this._handler7 = handler
        break
      case '@forum/create-post':
        this._handler8 = handler
        break
      case '@forum/delete-post':
        this._handler9 = handler
        break
      case '@forum/create-comment':
        this._handler10 = handler
        break
      case '@forum/delete-comment':
        this._handler11 = handler
        break
      case '@forum/setup-roles':
        this._handler12 = handler
        break
      case '@forum/promote-user':
        this._handler13 = handler
        break
      default:
        throw new Error('Cannot register a handler for a nonexistent route: ' + name)
    }
    this._missing--
  }

  _checkAll () {
    assert(this._handler0 !== null, 'Missing handler for "@autobonk/remove-writer"')
    assert(this._handler1 !== null, 'Missing handler for "@autobonk/add-writer"')
    assert(this._handler2 !== null, 'Missing handler for "@autobonk/add-invite"')
    assert(this._handler3 !== null, 'Missing handler for "@autobonk/revoke-invite"')
    assert(this._handler4 !== null, 'Missing handler for "@autobonk/init-context"')
    assert(this._handler5 !== null, 'Missing handler for "@autobonk/define-role"')
    assert(this._handler6 !== null, 'Missing handler for "@autobonk/grant-roles"')
    assert(this._handler7 !== null, 'Missing handler for "@autobonk/revoke-roles"')
    assert(this._handler8 !== null, 'Missing handler for "@forum/create-post"')
    assert(this._handler9 !== null, 'Missing handler for "@forum/delete-post"')
    assert(this._handler10 !== null, 'Missing handler for "@forum/create-comment"')
    assert(this._handler11 !== null, 'Missing handler for "@forum/delete-comment"')
    assert(this._handler12 !== null, 'Missing handler for "@forum/setup-roles"')
    assert(this._handler13 !== null, 'Missing handler for "@forum/promote-user"')
  }

  async dispatch (message, context) {
    if (this._missing > 0) {
      this._checkAll()
    }

    setVersion(defaultVersion)

    const op = b4a.isBuffer(message) ? decode(message) : message

    switch (op.id) {
      case 0:
        return this._handler0(op.value, context)
      case 1:
        return this._handler1(op.value, context)
      case 2:
        return this._handler2(op.value, context)
      case 3:
        return this._handler3(op.value, context)
      case 4:
        return this._handler4(op.value, context)
      case 5:
        return this._handler5(op.value, context)
      case 6:
        return this._handler6(op.value, context)
      case 7:
        return this._handler7(op.value, context)
      case 8:
        return this._handler8(op.value, context)
      case 9:
        return this._handler9(op.value, context)
      case 10:
        return this._handler10(op.value, context)
      case 11:
        return this._handler11(op.value, context)
      case 12:
        return this._handler12(op.value, context)
      case 13:
        return this._handler13(op.value, context)
      default:
        throw new Error('Handler not found for ID:' + op.id)
    }
  }
}

function encode (name, message, { version = defaultVersion } = {}) {
  const state = { buffer: null, start: 0, end: 0 }

  const route = getRouteByName(name)
  setVersion(version)

  c.uint.preencode(state, route.id)
  route.enc.preencode(state, message)

  state.buffer = b4a.allocUnsafe(state.end)
  c.uint.encode(state, route.id)
  route.enc.encode(state, message)

  return state.buffer
}

function decode (buffer, { version = defaultVersion } = {}) {
  const state = { buffer, start: 0, end: buffer.length }

  const id = c.uint.decode(state)
  const route = getRouteById(id)
  setVersion(version)

  const value = route.enc.decode(state)
  return { id, name: route.name, value }
}

const route0 = {
  name: '@autobonk/remove-writer',
  id: 0,
  enc: getEncoding('@autobonk/writer')
}

const route1 = {
  name: '@autobonk/add-writer',
  id: 1,
  enc: getEncoding('@autobonk/writer')
}

const route2 = {
  name: '@autobonk/add-invite',
  id: 2,
  enc: getEncoding('@autobonk/invite')
}

const route3 = {
  name: '@autobonk/revoke-invite',
  id: 3,
  enc: getEncoding('@autobonk/revoke-invite')
}

const route4 = {
  name: '@autobonk/init-context',
  id: 4,
  enc: getEncoding('@autobonk/context-init')
}

const route5 = {
  name: '@autobonk/define-role',
  id: 5,
  enc: getEncoding('@autobonk/role-def')
}

const route6 = {
  name: '@autobonk/grant-roles',
  id: 6,
  enc: getEncoding('@autobonk/acl-entry')
}

const route7 = {
  name: '@autobonk/revoke-roles',
  id: 7,
  enc: getEncoding('@autobonk/acl-entry')
}

const route8 = {
  name: '@forum/create-post',
  id: 8,
  enc: getEncoding('@forum/create-post')
}

const route9 = {
  name: '@forum/delete-post',
  id: 9,
  enc: getEncoding('@forum/delete-post')
}

const route10 = {
  name: '@forum/create-comment',
  id: 10,
  enc: getEncoding('@forum/create-comment')
}

const route11 = {
  name: '@forum/delete-comment',
  id: 11,
  enc: getEncoding('@forum/delete-comment')
}

const route12 = {
  name: '@forum/setup-roles',
  id: 12,
  enc: getEncoding('@forum/setup-roles')
}

const route13 = {
  name: '@forum/promote-user',
  id: 13,
  enc: getEncoding('@forum/promote-user')
}

function getRouteByName (name) {
  switch (name) {
    case '@autobonk/remove-writer':
      return route0
    case '@autobonk/add-writer':
      return route1
    case '@autobonk/add-invite':
      return route2
    case '@autobonk/revoke-invite':
      return route3
    case '@autobonk/init-context':
      return route4
    case '@autobonk/define-role':
      return route5
    case '@autobonk/grant-roles':
      return route6
    case '@autobonk/revoke-roles':
      return route7
    case '@forum/create-post':
      return route8
    case '@forum/delete-post':
      return route9
    case '@forum/create-comment':
      return route10
    case '@forum/delete-comment':
      return route11
    case '@forum/setup-roles':
      return route12
    case '@forum/promote-user':
      return route13
    default:
      throw new Error('Handler not found for name: ' + name)
  }
}

function getRouteById (id) {
  switch (id) {
    case 0:
      return route0
    case 1:
      return route1
    case 2:
      return route2
    case 3:
      return route3
    case 4:
      return route4
    case 5:
      return route5
    case 6:
      return route6
    case 7:
      return route7
    case 8:
      return route8
    case 9:
      return route9
    case 10:
      return route10
    case 11:
      return route11
    case 12:
      return route12
    case 13:
      return route13
    default:
      throw new Error('Handler not found for ID: ' + id)
  }
}

export {
  version,
  encode,
  decode,
  Router
}
