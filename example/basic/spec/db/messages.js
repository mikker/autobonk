// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

import { c } from 'hyperschema/runtime'

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @autobonk/writer
const encoding0 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.key)
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = m.isIndexer ? 1 : 0

    c.buffer.encode(state, m.key)
    c.uint.encode(state, flags)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const flags = c.uint.decode(state)

    return {
      key: r0,
      isIndexer: (flags & 1) !== 0
    }
  }
}

// @autobonk/invite.roles
const encoding1_4 = c.array(c.string)

// @autobonk/invite
const encoding1 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
    state.end++ // max flag is 8 so always one byte

    if (m.roles) encoding1_4.preencode(state, m.roles)
    if (m.createdBy) c.buffer.preencode(state, m.createdBy)
    if (m.createdAt) c.uint.preencode(state, m.createdAt)
    if (m.revokedAt) c.uint.preencode(state, m.revokedAt)
  },
  encode (state, m) {
    const flags =
      (m.roles ? 1 : 0) |
      (m.createdBy ? 2 : 0) |
      (m.createdAt ? 4 : 0) |
      (m.revokedAt ? 8 : 0)

    c.buffer.encode(state, m.id)
    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
    c.uint.encode(state, flags)

    if (m.roles) encoding1_4.encode(state, m.roles)
    if (m.createdBy) c.buffer.encode(state, m.createdBy)
    if (m.createdAt) c.uint.encode(state, m.createdAt)
    if (m.revokedAt) c.uint.encode(state, m.revokedAt)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: r0,
      invite: r1,
      publicKey: r2,
      expires: r3,
      roles: (flags & 1) !== 0 ? encoding1_4.decode(state) : null,
      createdBy: (flags & 2) !== 0 ? c.buffer.decode(state) : null,
      createdAt: (flags & 4) !== 0 ? c.uint.decode(state) : 0,
      revokedAt: (flags & 8) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @autobonk/revoke-invite
const encoding2 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.id)
    c.uint.preencode(state, m.revokedAt)
  },
  encode (state, m) {
    c.buffer.encode(state, m.id)
    c.uint.encode(state, m.revokedAt)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.uint.decode(state)

    return {
      id: r0,
      revokedAt: r1
    }
  }
}

// @autobonk/context-init
const encoding3 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.creatorKey)
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    c.buffer.encode(state, m.creatorKey)
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.uint.decode(state)

    return {
      creatorKey: r0,
      index: r1,
      timestamp: r2
    }
  }
}

// @autobonk/role-def.permissions
const encoding4_1 = encoding1_4

// @autobonk/role-def
const encoding4 = {
  preencode (state, m) {
    c.string.preencode(state, m.name)
    encoding4_1.preencode(state, m.permissions)
    c.uint.preencode(state, m.rev)
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    c.string.encode(state, m.name)
    encoding4_1.encode(state, m.permissions)
    c.uint.encode(state, m.rev)
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = encoding4_1.decode(state)
    const r2 = c.uint.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.uint.decode(state)

    return {
      name: r0,
      permissions: r1,
      rev: r2,
      index: r3,
      timestamp: r4
    }
  }
}

// @autobonk/acl-entry.roles
const encoding5_1 = encoding1_4

// @autobonk/acl-entry
const encoding5 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.subjectKey)
    encoding5_1.preencode(state, m.roles)
    c.uint.preencode(state, m.rev)
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    c.buffer.encode(state, m.subjectKey)
    encoding5_1.encode(state, m.roles)
    c.uint.encode(state, m.rev)
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r0 = c.buffer.decode(state)
    const r1 = encoding5_1.decode(state)
    const r2 = c.uint.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.uint.decode(state)

    return {
      subjectKey: r0,
      roles: r1,
      rev: r2,
      index: r3,
      timestamp: r4
    }
  }
}

// @room/message
const encoding6 = {
  preencode (state, m) {
    c.uint.preencode(state, m.index)
    state.end++ // max flag is 1 so always one byte

    if (m.text) c.string.preencode(state, m.text)
  },
  encode (state, m) {
    const flags = m.text ? 1 : 0

    c.uint.encode(state, m.index)
    c.uint.encode(state, flags)

    if (m.text) c.string.encode(state, m.text)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const flags = c.uint.decode(state)

    return {
      index: r0,
      text: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

// @room/send-message
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.text)
  },
  encode (state, m) {
    c.string.encode(state, m.text)
  },
  decode (state) {
    const r0 = c.string.decode(state)

    return {
      text: r0
    }
  }
}

// @autobonk/invite/hyperdb#0.roles
const encoding8_4 = encoding1_4

// @autobonk/invite/hyperdb#0
const encoding8 = {
  preencode (state, m) {
    c.buffer.preencode(state, m.invite)
    c.buffer.preencode(state, m.publicKey)
    c.int.preencode(state, m.expires)
    state.end++ // max flag is 8 so always one byte

    if (m.roles) encoding8_4.preencode(state, m.roles)
    if (m.createdBy) c.buffer.preencode(state, m.createdBy)
    if (m.createdAt) c.uint.preencode(state, m.createdAt)
    if (m.revokedAt) c.uint.preencode(state, m.revokedAt)
  },
  encode (state, m) {
    const flags =
      (m.roles ? 1 : 0) |
      (m.createdBy ? 2 : 0) |
      (m.createdAt ? 4 : 0) |
      (m.revokedAt ? 8 : 0)

    c.buffer.encode(state, m.invite)
    c.buffer.encode(state, m.publicKey)
    c.int.encode(state, m.expires)
    c.uint.encode(state, flags)

    if (m.roles) encoding8_4.encode(state, m.roles)
    if (m.createdBy) c.buffer.encode(state, m.createdBy)
    if (m.createdAt) c.uint.encode(state, m.createdAt)
    if (m.revokedAt) c.uint.encode(state, m.revokedAt)
  },
  decode (state) {
    const r1 = c.buffer.decode(state)
    const r2 = c.buffer.decode(state)
    const r3 = c.int.decode(state)
    const flags = c.uint.decode(state)

    return {
      id: null,
      invite: r1,
      publicKey: r2,
      expires: r3,
      roles: (flags & 1) !== 0 ? encoding8_4.decode(state) : null,
      createdBy: (flags & 2) !== 0 ? c.buffer.decode(state) : null,
      createdAt: (flags & 4) !== 0 ? c.uint.decode(state) : 0,
      revokedAt: (flags & 8) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @autobonk/writer/hyperdb#1
const encoding9 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte
  },
  encode (state, m) {
    const flags = m.isIndexer ? 1 : 0

    c.uint.encode(state, flags)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      key: null,
      isIndexer: (flags & 1) !== 0
    }
  }
}

// @autobonk/context-init/hyperdb#2
const encoding10 = {
  preencode (state, m) {
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r1 = c.uint.decode(state)
    const r2 = c.uint.decode(state)

    return {
      creatorKey: null,
      index: r1,
      timestamp: r2
    }
  }
}

// @autobonk/role-def/hyperdb#3.permissions
const encoding11_1 = encoding1_4

// @autobonk/role-def/hyperdb#3
const encoding11 = {
  preencode (state, m) {
    encoding11_1.preencode(state, m.permissions)
    c.uint.preencode(state, m.rev)
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    encoding11_1.encode(state, m.permissions)
    c.uint.encode(state, m.rev)
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r1 = encoding11_1.decode(state)
    const r2 = c.uint.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.uint.decode(state)

    return {
      name: null,
      permissions: r1,
      rev: r2,
      index: r3,
      timestamp: r4
    }
  }
}

// @autobonk/acl-entry/hyperdb#4.roles
const encoding12_1 = encoding1_4

// @autobonk/acl-entry/hyperdb#4
const encoding12 = {
  preencode (state, m) {
    encoding12_1.preencode(state, m.roles)
    c.uint.preencode(state, m.rev)
    c.uint.preencode(state, m.index)
    c.uint.preencode(state, m.timestamp)
  },
  encode (state, m) {
    encoding12_1.encode(state, m.roles)
    c.uint.encode(state, m.rev)
    c.uint.encode(state, m.index)
    c.uint.encode(state, m.timestamp)
  },
  decode (state) {
    const r1 = encoding12_1.decode(state)
    const r2 = c.uint.decode(state)
    const r3 = c.uint.decode(state)
    const r4 = c.uint.decode(state)

    return {
      subjectKey: null,
      roles: r1,
      rev: r2,
      index: r3,
      timestamp: r4
    }
  }
}

// @room/message/hyperdb#5
const encoding13 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.text) c.string.preencode(state, m.text)
  },
  encode (state, m) {
    const flags = m.text ? 1 : 0

    c.uint.encode(state, flags)

    if (m.text) c.string.encode(state, m.text)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      index: 0,
      text: (flags & 1) !== 0 ? c.string.decode(state) : null
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@autobonk/writer': return encoding0
    case '@autobonk/invite': return encoding1
    case '@autobonk/revoke-invite': return encoding2
    case '@autobonk/context-init': return encoding3
    case '@autobonk/role-def': return encoding4
    case '@autobonk/acl-entry': return encoding5
    case '@room/message': return encoding6
    case '@room/send-message': return encoding7
    case '@autobonk/invite/hyperdb#0': return encoding8
    case '@autobonk/writer/hyperdb#1': return encoding9
    case '@autobonk/context-init/hyperdb#2': return encoding10
    case '@autobonk/role-def/hyperdb#3': return encoding11
    case '@autobonk/acl-entry/hyperdb#4': return encoding12
    case '@room/message/hyperdb#5': return encoding13
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

export { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
